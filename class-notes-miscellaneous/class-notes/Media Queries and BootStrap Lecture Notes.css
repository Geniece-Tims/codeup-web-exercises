/*Responsive Web Design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience, easy reading and navigation with a minimum of resizing, panning, and scrolling -- across a wide range of devices (from desktop computer monitors to mobile phones). (Wikipedia)

Setting the Viewpoint:
~ One of the first things you need to do.
~ The viewpoint meta tag instructs the page to match the screen's width. This allows the page to match different screen sizes. Don't use if you're not going to make your page responsive.
*/
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<!-- ... -->
</head>

/*Media Queries:
~ The most important tool in your belt when it comes to building a responsive web site.
~ Allows you to target CSS based on the pixel width of the viewable area and make changes based on those dimensions.
*/
      /* screen sizes 500px and up */
@media screen and (min-width:500px) {
    selector {
        property: value;
    }
}
/* screen sizes between 960px and 1200px */
@media screen and (min-width:960px) and (max-width:1200px) {
    /* ... */
}

/*Breakpoints:
~ What are referred to as major resolution changes, which can be specified with queries, usually based on popular device configurations.
~Got its name because traditionally major layout elements are broken and repositioned, though not always the case, and the name stuck.
~ Breakpoint size can be be determined based on whatever you want, but there are also resources online that will show the most frequently used. */
/* Small devices (phones and pocket devices, 576 and up) */
@media screen and (min-width:576px) { /* ... */ }

/* Medium devices (tablets, 768px and up) */
@media screen and (min-width:768px) { /* ... */ }

/* Large devices (desktops, 992px and up) */
@media screen and (min-width:992px) { /* ... */ }

/* Extra large devices (large desktops, 1200px and up) */
@media screen and (min-width:1200px) { /* ... */ }

/*Mobile First Approach:
~ This means writing your default styling for a mobile device then using media queries to change the layout based on larger devices.
~ This approach works well because you will always support mobile and can build from there.
~ Working larger first introduces complications trying to break a design down to fit.

@media:
~ The CSS at-rule can be used to apply part of a stylesheet based on the result of one more media queries.
~ With it, you specify a media query and a block of CSS to apply to the document if and only if the media query matches the device on which the content is being used.
~ In JS, the rules created using @media can be accessed with the CSSMediaRule CSS object model interface. */
abbr {
    color: chocolate;
}

@media (hover: hover) {
    abbr:hover {
        color: limegreen;
        transition-duration: 1s;
    }
}

@media not all and (hover: hover) {
    abbr::after {
        content: ' (' attr(title) ')';
    }
}
/*The @media at-rule may be placed at the top level of your code or nested inside any other conditional group at-rule.*/
/* At the top level of your code */
@media screen and (min-width: 900px) {
    article {
        padding: 1rem 3rem;
    }
}

/* Nested within another conditional at-rule */
@supports (display: flex) {
    @media screen and (min-width: 900px) {
        article {
            display: flex;
        }
    }
}
/*Media Types:
~ describe the general category of a device, except when using the "not" or "only logical operators.
~This is optional and the "all" type is implied.
    + all: suitable for all devices.
    + print: intended for paged material and documents viewed on a screen in print preview mode.
        * paged media: properties that control the presentation of content for print or any other media that splits content into discrete pages. It allows you to set page breaks, control printable area, style left and right pages differently, and control breaks inside elements.
            - widely used with: break-before, break-after, break-inside, orphans, widows, @page
    + screen: intended primarily for screens.
Media Features:
~ describe specific characteristics of the user agent, output device, or environment.
~ These expressions test their presence or value, and are entirely optional.
~ Each media feature expression must be surrounded by parenthesis.
    + any-hover: does any available input mechanism allow the user to hover over elements?
    + any-pointer: is any available input mechanism a pointing device, and if so, how accurate is it?
    + aspect-ration: width-to-height aspect ratio of the viewpoint.
    + color: number of bits per color component of the output device, or zero if the device isn't color.
    + color-gamut: approximate range of colors that are supported by the suer agent and output device. A
    + color-index: number of entries in the output device's color lookup table, or zero if the device does not use such a table.
    + device-aspect-ratio: width-to-height aspect ratio of the output device.
    + device-height: height of the rendering surface of the output device.
    + device-width: width of the rendering surface of the output device.
    + display-mode: the display mode of the application, as specified in the web app manifest's display member.
    + dynamic-range: combination of brightness, contrast ratio, and color depth that are supported by the user and the output device.
    + forced-colors: detect whether user agent restricts color palette.
    + grid: does the device use a grid or bitmap screen?
    + height: height of the viewpoint.
    + hover: does the primary input mechanism allow the user to hover over elements?
    + inverted-colors: is the user agent or underlying OS inverting colors.
    + monochrome: bits per pixel in the output device's frame buffer, or zero if the device isn't monochrome.
    + orientation: orientation of the viewpoint.
    + overflow-block: how does the output device handle content that overflows the viewpoint along the block axis?
    + overflow-inline: can content that overflows the viewpoint along the inline axis be scrolled?
    + pointer: is the primary input mechanism a pointing device, and if so, how accurate is it?
    + prefers-color-scheme: detect if the user prefers a light or dark color scheme.
    + prefers-contrast: detects if the user has requested the system increase or decrease the amount of contrast between adjacent colors.
    + prefers-reduced-motion: the user prefers less motion on the page.
    + resolution: pixel density of the output device.
    + scripting: detects whether scripting (i.e.JS) is available.
    + update: how frequently the output device can modify the appearance of content.
    + video-dynamic-range: combination of brightness, contrast ratio, and color depth that are supported by the video plane of user agent and the output device.
    + width: width of the viewpoint including width of scrollbar. */